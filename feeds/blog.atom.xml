<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Doctrina</title><link href="http://web-pages.github.io/test/" rel="alternate"></link><link href="http://web-pages.github.io/test/feeds/blog.atom.xml" rel="self"></link><id>http://web-pages.github.io/test/</id><updated>2013-03-14T00:00:00-07:00</updated><entry><title>JavaScript Lecture: Cryptography In The Browser</title><link href="http://web-pages.github.io/test/JavaScript_Lecture:Cryptography_In_The_Browser.html" rel="alternate"></link><updated>2013-03-14T00:00:00-07:00</updated><author><name>Barry Steyn</name></author><id>tag:web-pages.github.io,2013-03-14:test/JavaScript_Lecture:Cryptography_In_The_Browser.html</id><summary type="html">&lt;p&gt;I was recently asked to lecture the local Toronto JavaScript meetup about Cryptography in the browser. Here are my lecture slides. Apparently, there is a video of my talk that will be put up. When I get, I will link to it over here.&lt;/p&gt;
&lt;p&gt;Enjoy, and I would grateful for any feedback. Do note that the audience was not hard-core cryptographers.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;iframe src="http://www.slideshare.net/slideshow/embed_code/17424793" width="476" height="400" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"&gt;&lt;/iframe&gt;&lt;/center&gt;&lt;/p&gt;</summary><category term="JavaScript"></category><category term="Cryptography"></category><category term="Lecture"></category></entry><entry><title>Mathematical Nonsense - Inifinte Sum Series</title><link href="http://web-pages.github.io/test/Mathematical_Nonsense_-Inifinite-Sum-Series.html" rel="alternate"></link><updated>2013-03-02T00:00:00-08:00</updated><author><name>Barry Steyn</name></author><id>tag:web-pages.github.io,2013-03-02:test/Mathematical_Nonsense_-Inifinite-Sum-Series.html</id><summary type="html">&lt;p&gt;The following fact for infinite series crops up all the time:&lt;/p&gt;
&lt;div class="math"&gt;$$ r\neq 1, 1+r+r^2+r^3+\ldots +r^k = \frac{r^{k+1}-1}{r-1} $$&lt;/div&gt;
&lt;h1 id="proof"&gt;Proof&lt;a class="headerlink" href="#proof" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;The proof is by induction:&lt;/p&gt;
&lt;h3 id="base-case-k1"&gt;Base Case: k=1&lt;a class="headerlink" href="#base-case-k1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;For the base case, where k=1, the left hand side of the above sum is &lt;span class="math"&gt;\(1+r\)&lt;/span&gt;, and the right hand side is &lt;span class="math"&gt;\(\frac{r^2-1}{1-r}\)&lt;/span&gt;:&lt;/p&gt;
&lt;div class="math"&gt;\begin{aligned}
 1+r &amp;amp;= (1+r)\cdot \frac{1-r}{1-r} \cr
 &amp;amp;= \frac{(1+r)(1-r)}{1-r} \cr
 &amp;amp;= \frac{r^2-1}{1-r} \cr
\end{aligned}&lt;/div&gt;
&lt;h3 id="inductive-case-kn"&gt;Inductive Case: k=n&lt;a class="headerlink" href="#inductive-case-kn" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Assume the above holds for &lt;span class="math"&gt;\(k=n-1\)&lt;/span&gt;, then &lt;span class="math"&gt;\(1+r+r^2+r^3+\ldots +r^{n-1} = \frac{r^n-1}{r-1}\)&lt;/span&gt;. &lt;/p&gt;
&lt;div class="math"&gt;$$\left( 1+r+r^2+r^3+\ldots +r^{n-1} \right) + r^n $$&lt;/div&gt;
&lt;p&gt;By the inductive argument:&lt;/p&gt;
&lt;div class="math"&gt;\begin{aligned}
 &amp;amp;= \frac{r^n-1}{r-1} + r^n \cr
 &amp;amp;= \frac{r^n\cdot(r-1)+r^n-1}{r-1} \cr
 &amp;amp;= \frac{r^{n+1} - r^n + r^n -1}{r-1} \cr
 &amp;amp;= \frac{r^{n+1} -1}{r-1} \cr
\end{aligned}&lt;/div&gt;
&lt;h1 id="some-useful-facts"&gt;Some useful facts&lt;a class="headerlink" href="#some-useful-facts" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;h3 id="assume-r-1-then-the-sum-is-bounded-by-frac11-r"&gt;Assume r &amp;lt; 1, then the sum is bounded by &lt;span class="math"&gt;\(\frac{1}{1-r}\)&lt;/span&gt;&lt;a class="headerlink" href="#assume-r-1-then-the-sum-is-bounded-by-frac11-r" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If &lt;span class="math"&gt;\(r &amp;lt; 1\)&lt;/span&gt;, then: &lt;span class="math"&gt;\(1+r+r^2+r^3+\ldots +r^k \leq \frac{1}{1-r}\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;This is easy to see: if &lt;span class="math"&gt;\(r&amp;lt;1\)&lt;/span&gt;, then &lt;span class="math"&gt;\(1 - r^{k+1} \leq 1\)&lt;/span&gt;, and so &lt;span class="math"&gt;\(\frac{r^{k+1}-1}{r-1} = \frac{1-r^{k+1}}{1-r}\leq \frac{1}{1-r}\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;In this case, the series sum is dominated by the first term (e.g. 1), and is bounded above by something that is independent of k.&lt;/p&gt;
&lt;h3 id="assume-r-1-then-the-sum-is-bounded-by-rkcdot-left1frac1r-1-right"&gt;Assume r &amp;gt; 1, then the sum is bounded by &lt;span class="math"&gt;\(r^k\cdot \left(1+\frac{1}{r-1} \right)\)&lt;/span&gt;&lt;a class="headerlink" href="#assume-r-1-then-the-sum-is-bounded-by-rkcdot-left1frac1r-1-right" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If &lt;span class="math"&gt;\(r &amp;gt; 1\)&lt;/span&gt;, then: &lt;span class="math"&gt;\( 1+r+r^2+r^3+\ldots +r^k \leq r^k\cdot \left(1+\frac{1}{r-1} \right)\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The proof:
&lt;/p&gt;
&lt;div class="math"&gt;\begin{aligned}
 \frac{r^{k+1}-1}{r-1} &amp;amp;\leq \frac{r^{k+1}+1}{r-1}\cr
 &amp;amp;= \frac{r^{k+1}}{r-1} + \frac{1}{r-1} \cr
 &amp;amp;= r^k\cdot \frac{r}{r-1} + \frac{1}{r-1} \cr
 &amp;amp;\leq r^k + \frac{1}{r-1} \cr
 &amp;amp;\leq r^k + \frac{r^k}{r-1} \cr
 &amp;amp;= r^k \cdot \left(1 + \frac{1}{r-1} \right) \cr
\end{aligned}&lt;/div&gt;
&lt;p&gt;In this case, the series sum is dominated by the last term (e.g. &lt;span class="math"&gt;\(r^k\)&lt;/span&gt;), and is bounded above by &lt;span class="math"&gt;\(2\cdot r^k\)&lt;/span&gt;.&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: 'center'," +
        "    displayIndent: '0em'," +
        "    showMathMenu: true," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }, linebreaks: { automatic: true, width: '80% container' }" +
        "    } " +
        "}); ";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary><category term="Math"></category><category term="Mathematical_Nonsense"></category></entry><entry><title>Mathematical Nonsense - Logarithm Equality</title><link href="http://web-pages.github.io/test/Mathematical_Nonsense_Lemma-For-Logarithm-Equality.html" rel="alternate"></link><updated>2013-02-06T00:00:00-08:00</updated><author><name>Barry Steyn</name></author><id>tag:web-pages.github.io,2013-02-06:test/Mathematical_Nonsense_Lemma-For-Logarithm-Equality.html</id><summary type="html">&lt;p&gt;It's been many years since I was first taught &lt;a href="http://en.wikipedia.org/wiki/Logarithm"&gt;logarithms&lt;/a&gt;. So when looking at a proof that hinged on the fact that &lt;span class="math"&gt;\(a^{log_b n} = n^{log_b a}\)&lt;/span&gt;, I thought that the proof was wrong. Actually, it was my fault: &lt;span class="math"&gt;\(a^{log_b n}\)&lt;/span&gt; is indeed equal to &lt;span class="math"&gt;\(n^{log_b a}\)&lt;/span&gt;, I just forgot.&lt;/p&gt;
&lt;p&gt;And so, I thought I would prove this fact. I am going to call it mathematical nonense, and its just short little lemmas that give me pleasure to prove and to reread.&lt;/p&gt;
&lt;div class="math"&gt;\begin{aligned}
a^{log_b n} &amp;amp;= X &amp;amp; \cr
log_b (a^{log_b n}) &amp;amp;= log_b (X) \cr
log_b n \cdot log_b a&amp;amp;= log_b(X) \cr
log_b a \cdot log_b n&amp;amp;= log_b(X) \cr
log_b n^{log_b a}&amp;amp;= log_b(X) &amp;amp; \cr
n^{log_b a}&amp;amp;= X = a^{log_b n} &amp;amp; \cr
\end{aligned}&lt;/div&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: 'center'," +
        "    displayIndent: '0em'," +
        "    showMathMenu: true," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }, linebreaks: { automatic: true, width: '80% container' }" +
        "    } " +
        "}); ";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary><category term="Math"></category><category term="Mathematical_Nonsense"></category></entry><entry><title>Base64 With OpenSSL C API</title><link href="http://web-pages.github.io/test/Base64-With-OpenSSL-C-API.html" rel="alternate"></link><updated>2012-12-19T00:00:00-08:00</updated><author><name>Barry Steyn</name></author><id>tag:web-pages.github.io,2012-12-19:test/Base64-With-OpenSSL-C-API.html</id><summary type="html">&lt;p&gt;OpenSSL has the ability to perform &lt;a href="http://en.wikipedia.org/wiki/Base64"&gt;Base64&lt;/a&gt; encodings and decodings. There seems to be many queries for working examples on how to use this functionality. Unfortunately, the &lt;a href="http://www.openssl.org/docs/crypto/BIO_f_base64.html"&gt;example&lt;/a&gt; on the OpenSSL site is quite obtuse, and every other example I have come accross does not work. So here is some &lt;a href="https://gist.github.com/4409525/download"&gt;working code&lt;/a&gt;. Enjoy!&lt;/p&gt;
&lt;h1 id="get-the-code"&gt;Get The Code&lt;a class="headerlink" href="#get-the-code" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;You can download this entire gist &lt;a href="https://gist.github.com/4409525/download"&gt;here&lt;/a&gt;. It consists of the following files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/4409525#file-base64decode-c"&gt;Base64Decode.c&lt;/a&gt; - the decode function (takes Base64 encoded string as input).&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/4409525#file-base64encode-c"&gt;Base64Encode.c&lt;/a&gt; - the encode function (takes a "normal" string as input).&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/4409525#file-main-c"&gt;Main.c&lt;/a&gt; - the main c file that demonstrates usage of the functionality in the two files above.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/4409525#file-makefile"&gt;Makefile&lt;/a&gt; - the C makefile. Compilation has been tested on a linux ubuntu distribution, and links with &lt;code&gt;lcrypto&lt;/code&gt; for &lt;a href="http://www.openssl.org/"&gt;opensll&lt;/a&gt; and &lt;code&gt;lm&lt;/code&gt; for math.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="base64-encoding"&gt;Base64 Encoding&lt;a class="headerlink" href="#base64-encoding" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;script src="https://gist.github.com/4409525.js?file=Base64Encode.c"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;Note the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Given a string of length &lt;code&gt;n&lt;/code&gt;, the resulting Base64 string is length $4 *\lceil \frac{n}{3} \rceil $. This is performed on line 12.&lt;/li&gt;
&lt;li&gt;On line 13, &lt;code&gt;*buffer&lt;/code&gt; is malloc'd to &lt;code&gt;encodedSize+1&lt;/code&gt;. The &lt;code&gt;+1&lt;/code&gt; is because an extra character is needed for the &lt;code&gt;NULL&lt;/code&gt; character (&lt;code&gt;'\0'&lt;/code&gt;) at the end of the string.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="base64-decoding"&gt;Base64 Decoding&lt;a class="headerlink" href="#base64-decoding" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;script src="https://gist.github.com/4409525.js?file=Base64Decode.c"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;Note the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It is important to set the flag &lt;code&gt;BIO_FLAGS_BASE64_NO_NL&lt;/code&gt;. If this is not done, the read operation will block until a newline character (&lt;code&gt;\n&lt;/code&gt;) is encountered.&lt;/li&gt;
&lt;li&gt;The function &lt;code&gt;calcDecodeLength&lt;/code&gt; will, given a Base64 encoded input string, calculate the length of the decoded string. Base64 encodes a "normal" 8 bit character string by using only 6 bits (hence only &lt;span class="math"&gt;\(2^6=64\)&lt;/span&gt; characters are needed). Therefore every 4 characters of Base64 decodes to three decoded characters, and multiplying the length of the Base64 string by &lt;span class="math"&gt;\(\frac{3}{4}\)&lt;/span&gt; will typically suffice. There are however two exceptions due to padding denoted by the &lt;code&gt;=&lt;/code&gt; character. For more information, read &lt;a href="http://en.wikipedia.org/wiki/Base64#Decoding_Base64_with_padding"&gt;decoding base64 with padding&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="usage"&gt;Usage&lt;a class="headerlink" href="#usage" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;The above functionality is used like so:
&lt;script src="https://gist.github.com/4409525.js?file=Main.c"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;Compile it with this MakeFile:
&lt;script src="https://gist.github.com/4409525.js?file=Makefile"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;h1 id="memory-stuff"&gt;Memory Stuff&lt;a class="headerlink" href="#memory-stuff" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;The memory for &lt;code&gt;buffer&lt;/code&gt; in both functions is created on the heap using &lt;a href="http://www.cplusplus.com/reference/cstdlib/malloc/"&gt;malloc&lt;/a&gt;. Therefore, it must be managed. This is a tiny example, and the program ends before any memory leaks become a problem, but in production code, remember to free the heap memory occupied by &lt;code&gt;buffer&lt;/code&gt; after it has been used. This is done with the &lt;a href="http://www.cplusplus.com/reference/cstdlib/free/"&gt;free&lt;/a&gt; command.&lt;/p&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;a class="headerlink" href="#conclusion" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;The above functions should perform better error checking if used in production. It also only works for encoding and decoding of a strings (although it is not too difficult to get it to work for files as well). This should give the inquisitive (and frustrated) programmer a base from which to work from.&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: 'center'," +
        "    displayIndent: '0em'," +
        "    showMathMenu: true," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }, linebreaks: { automatic: true, width: '80% container' }" +
        "    } " +
        "}); ";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary><category term="Development"></category><category term="OpenSSL"></category></entry><entry><title>Base64 With OpenSSL C API: Binary Safe And Portable</title><link href="http://web-pages.github.io/test/Base64-With-OpenSSL-C-API-Binary-Safe-And-Portable.html" rel="alternate"></link><updated>2012-12-19T00:00:00-08:00</updated><author><name>Barry Steyn</name></author><id>tag:web-pages.github.io,2012-12-19:test/Base64-With-OpenSSL-C-API-Binary-Safe-And-Portable.html</id><summary type="html">&lt;p&gt;OpenSSL has the ability to perform &lt;a href="http://en.wikipedia.org/wiki/Base64"&gt;Base64&lt;/a&gt; encodings and decodings. There seems to be many queries for working examples on how to use this functionality. Unfortunately, the &lt;a href="http://www.openssl.org/docs/crypto/BIO_f_base64.html"&gt;example&lt;/a&gt; on the OpenSSL site is quite obtuse, and every other example I have come accross does not work. So here is some &lt;a href="https://gist.github.com/7308212/download"&gt;working code&lt;/a&gt;. Enjoy!&lt;/p&gt;
&lt;h1 id="get-the-code"&gt;Get The Code&lt;a class="headerlink" href="#get-the-code" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;You can download this entire gist &lt;a href="https://gist.github.com/7308212/download"&gt;here&lt;/a&gt;. It consists of the following files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/7308212#file-base64decode-c"&gt;Base64Decode.c&lt;/a&gt; - the decode function (takes Base64 encoded string as input).&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/7308212#file-base64encode-c"&gt;Base64Encode.c&lt;/a&gt; - the encode function (takes a "normal" string as input).&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/7308212#file-main-c"&gt;Main.c&lt;/a&gt; - the main c file that demonstrates usage of the functionality in the two files above.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/7308212#file-makefile"&gt;Makefile&lt;/a&gt; - the C makefile. Compilation has been tested on a linux ubuntu distribution, and links with &lt;code&gt;lcrypto&lt;/code&gt; for &lt;a href="http://www.openssl.org/"&gt;opensll&lt;/a&gt; and &lt;code&gt;lm&lt;/code&gt; for math.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="base64-encoding"&gt;Base64 Encoding&lt;a class="headerlink" href="#base64-encoding" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;script src="https://gist.github.com/7308212.js?file=Base64Encode.c"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;Note the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This code is binary safe, and therefore does not assume the underlying the data is character bytes. Therefore, &lt;code&gt;uint8_t&lt;/code&gt; is used and a lenght is needed.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;BIO_get_mem_ptr&lt;/code&gt; command on line 18 is where the memory allocated on the heap by the encode action is accessed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="base64-decoding"&gt;Base64 Decoding&lt;a class="headerlink" href="#base64-decoding" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;script src="https://gist.github.com/7308212.js?file=Base64Decode.c"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;Note the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It is important to set the flag &lt;code&gt;BIO_FLAGS_BASE64_NO_NL&lt;/code&gt;. If this is not done, the read operation will block until a newline character (&lt;code&gt;\n&lt;/code&gt;) is encountered.&lt;/li&gt;
&lt;li&gt;The function &lt;code&gt;calcDecodeLength&lt;/code&gt; will, given a Base64 encoded input string, calculate the length of the decoded string. Base64 encodes a "normal" 8 bit character string by using only 6 bits (hence only &lt;span class="math"&gt;\(2^6=64\)&lt;/span&gt; characters are needed). Therefore every 4 characters of Base64 decodes to three decoded characters, and multiplying the length of the Base64 string by &lt;span class="math"&gt;\(\frac{3}{4}\)&lt;/span&gt; will typically suffice. There are however two exceptions due to padding denoted by the &lt;code&gt;=&lt;/code&gt; character. For more information, read &lt;a href="http://en.wikipedia.org/wiki/Base64#Decoding_Base64_with_padding"&gt;decoding base64 with padding&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="usage"&gt;Usage&lt;a class="headerlink" href="#usage" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;The above functionality is used like so:
&lt;script src="https://gist.github.com/7308212.js?file=Main.c"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;Compile it with this MakeFile:
&lt;script src="https://gist.github.com/7308212.js?file=Makefile"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;h1 id="memory-stuff"&gt;Memory Stuff&lt;a class="headerlink" href="#memory-stuff" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;The memory for &lt;code&gt;buffer&lt;/code&gt; in both functions is created on the heap using &lt;a href="http://www.cplusplus.com/reference/cstdlib/malloc/"&gt;malloc&lt;/a&gt;. Therefore, it must be managed. This is a tiny example, and the program ends before any memory leaks become a problem, but in production code, remember to free the heap memory occupied by &lt;code&gt;buffer&lt;/code&gt; after it has been used. This is done with the &lt;a href="http://www.cplusplus.com/reference/cstdlib/free/"&gt;free&lt;/a&gt; command.&lt;/p&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;a class="headerlink" href="#conclusion" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;The above functions should perform better error checking if used in production. It also only works for encoding and decoding of a strings (although it is not too difficult to get it to work for files as well). This should give the inquisitive (and frustrated) programmer a base from which to work from.&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: 'center'," +
        "    displayIndent: '0em'," +
        "    showMathMenu: true," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }, linebreaks: { automatic: true, width: '80% container' }" +
        "    } " +
        "}); ";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary><category term="Development"></category><category term="OpenSSL"></category></entry><entry><title>Upstart With Python VirtualEnv</title><link href="http://web-pages.github.io/test/VirtualEnv-With-Upstart.html" rel="alternate"></link><updated>2012-11-29T00:00:00-08:00</updated><author><name>Barry Steyn</name></author><id>tag:web-pages.github.io,2012-11-29:test/VirtualEnv-With-Upstart.html</id><summary type="html">&lt;p&gt;I thought I would write this very short blog article to help anyone who would who wants to launch a &lt;a href="http://projects.unbit.it/uwsgi/"&gt;uwsgi&lt;/a&gt; server that refers to a python script in a virtual environment via upstart.&lt;/p&gt;
&lt;p&gt;In order to run a &lt;a href="http://projects.unbit.it/uwsgi/"&gt;uwsgi&lt;/a&gt; server that runs a python script that in &lt;a href="http://pypi.python.org/pypi/virtualenv"&gt;virtualenv&lt;/a&gt;, the following switches must be defined:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;pythonpath&lt;/strong&gt; - this should be set to the folder where your script lives. Uwsgi uses this switch to define the &lt;a href="http://docs.python.org/2/using/cmdline.html#envvar-PYTHONPATH"&gt;PYTHONPATH&lt;/a&gt; environment variable for the script to be executed.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;virtualenv&lt;/strong&gt; - this must be set the folder where your virtual environment is defined. It is normally &lt;code&gt;~/.virtualenvs/&amp;lt;name of virtual environment&amp;gt;&lt;/code&gt;. Uwsgi uses this switch to define the &lt;a href="http://docs.python.org/2/using/cmdline.html#envvar-PYTHONHOME"&gt;PYTHONHOME&lt;/a&gt; environment variable for the script to be executed.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;file&lt;/strong&gt; - this is the file that will be run by uwsgi&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="an-upstart-example"&gt;An Upstart Example&lt;a class="headerlink" href="#an-upstart-example" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Lets assume the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;pythonpath&lt;/strong&gt; = "/home/dev/python-script"&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;virutalenv&lt;/strong&gt; = "/home/dev/.virtualenvs/python-script"&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;file&lt;/strong&gt; = "/home/dev/python-script/script.py"&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Then an upstart script to start uwsgi that will run this script in the virutalenv is as follows:
&lt;script src="https://gist.github.com/4469288.js"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;There are many options that one can give uwsgi. The above example is running a flask app, and therefore uses the &lt;code&gt;--callable&lt;/code&gt; switch (although your particular needs should be defined by the documentation).&lt;/p&gt;</summary><category term="System Administration"></category></entry><entry><title>JavaScript: Why Understanding Scope And Closures Matter</title><link href="http://web-pages.github.io/test/JavaScript:Why-Understanding-Scope-And-Closures-Matter.html" rel="alternate"></link><updated>2012-10-26T00:00:00-07:00</updated><author><name>Barry Steyn</name></author><id>tag:web-pages.github.io,2012-10-26:test/JavaScript:Why-Understanding-Scope-And-Closures-Matter.html</id><summary type="html">&lt;p&gt;When first learning how to program, a fundamental aspect is to learn about scope. Many languages copy the C &lt;em&gt;syntax&lt;/em&gt; for scope, including JavaScript. But while these language copy the C rules for scope, JavaScript does not. This results in frustration and potentially problematic code. JavaScript instead implements scope in a way that forces programmers to think a little differently.&lt;/p&gt;
&lt;p&gt;This post will explain how JavaScript implements scope and explains a very useful result of its scoping: Closures. It motivates the utility of JavaScript's scope model by explaining its role in asynchronous programming.&lt;/p&gt;
&lt;h1 id="scope"&gt;Scope&lt;a class="headerlink" href="#scope" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;C implements scope using the block operators: &lt;code&gt;{}&lt;/code&gt;. The type of scope it implements is called &lt;em&gt;block scope&lt;/em&gt; and where ever the block operators &lt;code&gt;{}&lt;/code&gt; are declared, the compiler will create scope. Languages (besides JavaScript) that copy this notation follow more-or-less the same block scope rules (e.g. Java).&lt;/p&gt;
&lt;p&gt;JavaScript uses block operators &lt;code&gt;{}&lt;/code&gt; but it does &lt;strong&gt;not&lt;/strong&gt; implement block scope. Coming from C/C++, the following code makes perfect sense (&lt;em&gt;please do not try run this JavaScript code&lt;/em&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;//Outer loop&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;//Inner loop&lt;/span&gt;
        &lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Firstly, note that the above will cause an error in Java, but in C/C++ (whose scope syntax JavaScript has copied), it works fine. This looks like it will output &lt;code&gt;Hello World&lt;/code&gt; eight times. It won't! It will instead loop endlessly, outputting &lt;code&gt;Hello World&lt;/code&gt; forever. This is because JavaScript does not implement &lt;em&gt;block scope&lt;/em&gt;; the &lt;code&gt;i&lt;/code&gt; of the inner loop keeps resetting the &lt;code&gt;i&lt;/code&gt; of the outer loop, and so the outer loop's end condition is never achieved. This is confusing for people experienced with block scope, and JavaScript should have copied the block scope rules if it copied the operators. JavaScript realises their mistake and so the &lt;a href="http://wiki.ecmascript.org/doku.php?id=harmony:let"&gt;let&lt;/a&gt; operator, which implements block scope, has been approved for future JavaScript releases. &lt;/p&gt;
&lt;p&gt;I feel that adding block scope solves the problem in a haphazard way. Firstly, it alters the way block scope in the C style is used, and secondly, it will entice programmers with experience of block scope to use &lt;code&gt;let&lt;/code&gt; instead of something better.&lt;/p&gt;
&lt;p&gt;But is there &lt;em&gt;something better&lt;/em&gt;? Scope has traditionally been implemented in JavaScript via functions and is known as &lt;em&gt;function scope&lt;/em&gt;. There is an argument to be made that when used correctly, function scope can be very elegant and achieve most of what block scope does. But first, an explanation of function scope is in order...&lt;/p&gt;
&lt;h3 id="function-scope"&gt;Function Scope&lt;a class="headerlink" href="#function-scope" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Function scope means that everything between bracket operators &lt;code&gt;{}&lt;/code&gt; is scoped &lt;em&gt;as long as it is part of a function&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Goodbye&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//Hello&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//Goodbye&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The code snippet above demonstrates function scoping: inside the function &lt;code&gt;message&lt;/code&gt;, the variable &lt;code&gt;foo&lt;/code&gt; is scoped and is distinct to the variable &lt;code&gt;foo&lt;/code&gt; outside the function. &lt;em&gt;Function scope&lt;/em&gt; is used heavily in JavaScript. In fact, there is a common pattern to create a function just for the purpose of scope. As an example, the standard advice for writing JQuery plugins is to use the following pattern:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//Do things here - they are scoped&lt;/span&gt;
&lt;span class="p"&gt;}(&lt;/span&gt;&lt;span class="nx"&gt;JQuery&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the above example, the last line invokes the function by using the invocation operator &lt;code&gt;()&lt;/code&gt; with the input parameter &lt;code&gt;JQuery&lt;/code&gt;. It immediately executes code inside the function which is scoped. In JQuery, a short cut for the &lt;code&gt;JQuery&lt;/code&gt; function is &lt;code&gt;$&lt;/code&gt;. Unfortunately, &lt;code&gt;$&lt;/code&gt; is a shortcut for other JavaScript libraries as well (e.g. ProtoTypeJS). To prevent polluting the global namespace with JQuery's &lt;code&gt;$&lt;/code&gt; (and also avoiding clashes with plugins that may be written for other JavaScript libraries), &lt;em&gt;scope&lt;/em&gt; is required. The above code snippet achieves the desired scope.&lt;/p&gt;
&lt;h3 id="functions-within-functions"&gt;Functions Within Functions&lt;a class="headerlink" href="#functions-within-functions" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Since functions have scope, declaring a function within another function provides another level of scope:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;func1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;//outer function&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;func2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;//inner function&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//bar&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;func2&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//foo&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;func1&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I will use the term &lt;em&gt;inner function&lt;/em&gt; to mean a function declared within another function and &lt;em&gt;outer function&lt;/em&gt; to refer to the function it is declared in (see code snippet above). &lt;/p&gt;
&lt;p&gt;In addition to its own scope, an inner function has access to the variables of the outer function as long as it does not declare variables with identical names (in which case it will overwrite the variables, but just within that function scope). For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;inner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//bar - msg can be accessed here&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The above seems intuitive and obvious, and I understand the reader not being &lt;em&gt;blown away&lt;/em&gt; by its utility. But the pattern of having an inner function that has access to an outer function's variable is the basis of a closure, which is very useful.&lt;/p&gt;
&lt;h1 id="closures"&gt;Closures &lt;a id="closures"&gt;&lt;/a&gt;&lt;a class="headerlink" href="#closures" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="a-technical-definition"&gt;A Technical Definition&lt;a class="headerlink" href="#a-technical-definition" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A variable that is assigned to a function is a &lt;em&gt;structure&lt;/em&gt; in memory that is used to represent the function. For many languages, this &lt;em&gt;structure&lt;/em&gt; is the memory address of the function, resulting in the variable only being able to invoke the function. Some languages like JavaScript implement a slightly more complex setup for the &lt;em&gt;structure&lt;/em&gt;. For these languages, the &lt;em&gt;structure&lt;/em&gt; holds both the address of the function and its &lt;em&gt;referencing environment&lt;/em&gt;. The referencing environment means the environment the function was originally declared in. If the function was originally declared within another function, then the referencing environment will mean the function that the original function was declared in.&lt;/p&gt;
&lt;p&gt;Having access to the referencing environment means access to certain non-local variables. Normally, a function has access to its own local variables and to the global variables. With the &lt;em&gt;referencing environment&lt;/em&gt; at the structure's disposal, calls to certain non-local variables (i.e. variables that were not declared in the function, but were declared in the function where it was defined) are possible. JavaScript implementors refer to the &lt;em&gt;referencing environment&lt;/em&gt; as the function's &lt;em&gt;context&lt;/em&gt;. When the &lt;em&gt;structure&lt;/em&gt; that points to a function also contains its original context (&lt;em&gt;referencing environment&lt;/em&gt;), it is called a closure. The image below demonstrates the concept, whereby the &lt;em&gt;context&lt;/em&gt; points to the original function (outer) that the function variable inner was declared in:&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img style="margin-left:4px; padding: 4px; background-color: #fff; border: 1px solid #ccc; border: 1px solid rgba(0, 0, 0, 0.2); -webkit-box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1); -moz-box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1); box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);"src ="http://doctrina.org/static/images/closure.png"&gt;&lt;/img&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h2 id="how-closures-work-and-are-used-not-too-technical"&gt;How Closures Work And Are Used (Not Too Technical)&lt;a class="headerlink" href="#how-closures-work-and-are-used-not-too-technical" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In more laymen's terms, an inner function defined within an outer function has access to all variables within the outer function. In JavaScript, the inner function is a closure because JavaScript includes its &lt;em&gt;context&lt;/em&gt;. Both the inner and outer functions are scoped.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;closureExample&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;//outer function&lt;/span&gt;
    &lt;span class="c1"&gt;//declare variables within the outer function&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;closureFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;//inner function&lt;/span&gt;
        &lt;span class="c1"&gt;//Do things here, and have access to outer function&amp;#39;s stuff&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;closureFunction&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;closure&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;closureExample&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When presented like this, closures do not seem interesting. But, when the &lt;em&gt;inner&lt;/em&gt; function lives longer than the &lt;em&gt;outer&lt;/em&gt; function, the inner function (i.e. the closure) will have access to state from that outer function that is not accessible anywhere else. Therefore closures have the ability to implement something that is taken for granted in classical object oriented languages: &lt;em&gt;Private State&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id="keeping-things-private"&gt;Keeping Things Private&lt;a class="headerlink" href="#keeping-things-private" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In a classical object oriented language, it is easy to keep methods and state private: Put the &lt;code&gt;private&lt;/code&gt; keyword in front of such state and methods. Modern object oriented scripting languages do not have this functionality. In that sense, JavaScript is in good company with the likes of Python and Ruby.&lt;/p&gt;
&lt;p&gt;But private state and methods are very useful at times. And it can be achieved in JavaScript by using a closure:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;closure&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//This is a private variable&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;//This object being returned is assigned to closure&lt;/span&gt;
        &lt;span class="nx"&gt;getCounter&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;;},&lt;/span&gt;
        &lt;span class="nx"&gt;increment&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;inc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;inc&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;number&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="nx"&gt;inc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;inc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}();&lt;/span&gt;

&lt;span class="nx"&gt;closure&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;closure&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getCounter&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;//10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There is a lot of things happening in the above example:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;First, notice on the last line the &lt;code&gt;();&lt;/code&gt; - the function is being invoked, the result of which is being assigned to &lt;code&gt;closure&lt;/code&gt;. To hammer this point home: We are &lt;strong&gt;not&lt;/strong&gt; assigning the variable &lt;code&gt;closure&lt;/code&gt; to a function, we are instead assigning it the result of the invoked function (what is returned from the function). This common pattern was mentioned above whereby a function is created only to create scope.&lt;/li&gt;
&lt;li&gt;The result assigned to &lt;code&gt;closure&lt;/code&gt; is an &lt;a href="http://doctrina.org/Javascript-Objects-Prototypes.html#cofl"&gt;Object Literal&lt;/a&gt; that consists of two functions which are closures. They are closures because they have access to the context in which they were declared.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In the code snippet above, once the outer function is invoked it cannot be accessed again because it is an anonymous function. The pattern of an &lt;em&gt;inner&lt;/em&gt; function living longer than the outer function &lt;em&gt;is the useful pattern for closures&lt;/em&gt; because it implements private state. The two closure functions within the object assigned to &lt;code&gt;closure&lt;/code&gt; have access to &lt;code&gt;counter&lt;/code&gt;. &lt;code&gt;counter&lt;/code&gt; is private: It cannot be altered nor accessed except through the closure functions. &lt;/p&gt;
&lt;p&gt;I will say it again: Closure functions are interesting when the &lt;em&gt;inner&lt;/em&gt; functions "outlives" the &lt;em&gt;outer&lt;/em&gt; object where it was declared. This is specially useful for asynchronicity.&lt;/p&gt;
&lt;h1 id="why-closures-are-so-useful-the-big-picture"&gt;Why Closures Are So Useful: The Big Picture&lt;a class="headerlink" href="#why-closures-are-so-useful-the-big-picture" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;One of JavaScript's most appealing features is that it is asynchronous from "the ground up". Asynchronicity is achieved by using an &lt;em&gt;event driven programming model&lt;/em&gt;: A function is executed only when an event occurs. That function is passed as an argument to the event handler. Functions used in this manner are called &lt;em&gt;callback&lt;/em&gt; functions. The &lt;em&gt;callback&lt;/em&gt; function, like any JavaScript function, will have access to the context where it was declared in. If the callback function is an inner function, it is a closure that is able to access variables in the outer function. As was shown above, closures can be used to maintain private state. So by using closure callback functions, you get the best of both worlds: &lt;strong&gt;You can implement event driven programming without having to maintain any state by passing it via the event handler&lt;/strong&gt;. This is extremely elegant and will decrease programmer errors. And this is a killer reason (amongst others I am sure) that function scope along with closures are so useful. &lt;/p&gt;
&lt;p&gt;JavaScript should not be used like classical object oriented languages. Its power lies in the fact that it should be able to handle more load (on both the server and the client) by using an event driven approach that does not block IO. Therefore I think the JavaScript programmer should be thinking in callback functions that are closures. And for this, function scope becomes essential and in a way, elegant.&lt;/p&gt;
&lt;h2 id="watch-out-callbacks-and-closures-sometimes-do-not-play-nicely"&gt;Watch Out: Callbacks And Closures Sometimes Do Not Play Nicely &lt;a id="closureandconstructor"&gt;&lt;/a&gt;&lt;a class="headerlink" href="#watch-out-callbacks-and-closures-sometimes-do-not-play-nicely" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Of course there are always &lt;em&gt;gotchas&lt;/em&gt; with JavaScript. Lets define a callback function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;createCallBack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;//First function&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;//Second function&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;//Third function&lt;/span&gt;
            &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createCallBack&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//Invoke the function assigned to createCallBack&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lets examine the above code. There are three &lt;code&gt;function&lt;/code&gt; operators:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The first &lt;code&gt;function&lt;/code&gt; operator creates a &lt;em&gt;function object&lt;/em&gt; and is assigned to &lt;code&gt;creatCallBack&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The second &lt;code&gt;function&lt;/code&gt; operator uses the &lt;a href="http://doctrina.org/Javascript-Function-Invocation-Patterns.html#ci"&gt;constructor invocation pattern&lt;/a&gt; to create a new object.&lt;/li&gt;
&lt;li&gt;The third &lt;code&gt;function&lt;/code&gt; operator is the result of the return statement. It is a &lt;em&gt;function object&lt;/em&gt; and because it is an instance of &lt;code&gt;Object&lt;/code&gt;, it gets returned instead of a new object (even though though the function was invoked with &lt;code&gt;new&lt;/code&gt; - read &lt;a href="http://doctrina.org/Javascript-Function-Invocation-Patterns.html#ci"&gt;constructor invocation pattern&lt;/a&gt; for more info).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When invoking the &lt;code&gt;createCallBack&lt;/code&gt; variable, what gets passed to the &lt;code&gt;window.onload&lt;/code&gt; event handler is the result of what is returned by the &lt;em&gt;seond&lt;/em&gt; &lt;code&gt;function&lt;/code&gt; operator, which is the code in the &lt;em&gt;third&lt;/em&gt; &lt;code&gt;function&lt;/code&gt; operator. Did you get that? Read this paragraph again until you understand, and if not, stick this code into your browser and play with it.&lt;/p&gt;
&lt;p&gt;The above code looks alright, except that &lt;em&gt;undefined&lt;/em&gt; gets alerted to the screen (try it for yourself). It turns out that when an event handler invokes a callback function, the &lt;a href="http://doctrina.org/Javascript-Function-Invocation-Patterns.html#fi"&gt;function invocation pattern&lt;/a&gt; is used. This results in the &lt;code&gt;this&lt;/code&gt; parameter being bound to the &lt;code&gt;global object&lt;/code&gt; (it is one of the pitfalls of the &lt;a href="http://doctrina.org/Javascript-Function-Invocation-Patterns.html#fi"&gt;function invocation pattern&lt;/a&gt;) instead of to the object that was created with the &lt;a href="http://doctrina.org/Javascript-Function-Invocation-Patterns.html#ci"&gt;constructor invocation pattern&lt;/a&gt;. To note that this problem only occurs when one uses the &lt;a href="http://doctrina.org/Javascript-Function-Invocation-Patterns.html#ci"&gt;constructor invocation pattern&lt;/a&gt; with callbacks like I have illustrated above. To get around this, apply the &lt;a href="http://doctrina.org/Javascript-Function-Invocation-Patterns.html#standardfix"&gt;standard fix&lt;/a&gt; for function invocation by declaring a &lt;code&gt;that&lt;/code&gt; variable to point to &lt;code&gt;this&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;createCallBack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;//First function&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;//Second function&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;that&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;//Third function&lt;/span&gt;
            &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;that&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createCallBack&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//Invoke the function assigned to createCallBack&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Since the function invoked by the event handler (the third function) is a closure, it has access to the &lt;code&gt;that&lt;/code&gt; variable (which is private), and so it has access to the new object created by the constructor invocation pattern.&lt;/p&gt;
&lt;h2 id="why-would-one-want-to-use-the-constructor-invocation-pattern-with-callbacks"&gt;Why Would One Want To Use The Constructor Invocation Pattern With Callbacks?&lt;a class="headerlink" href="#why-would-one-want-to-use-the-constructor-invocation-pattern-with-callbacks" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To tell you the truth, there is no good reason to mix the &lt;a href="http://doctrina.org/Javascript-Function-Invocation-Patterns.html#ci"&gt;constructor invocation pattern&lt;/a&gt; with a callback. I included it above as a pitfall because it is sometimes used (and misused). Using the &lt;a href="http://doctrina.org/Javascript-Function-Invocation-Patterns.html#ci"&gt;constructor invocation pattern&lt;/a&gt; is necessary when one wants to be able to change the default prototype linkings (see &lt;a href="http://doctrina.org/Javascript-Objects-Prototypes.html#coff"&gt;here&lt;/a&gt; for an example of this). This is only necessary when one wants to create objects that are inherited from another object. It is not necessary for creating new objects because new objects can be created via a closure.&lt;/p&gt;
&lt;p&gt;For example, here is a code snippet that uses the &lt;a href="http://doctrina.org/Javascript-Function-Invocation-Patterns.html#ci"&gt;constructor invocation pattern&lt;/a&gt; in order to create separate objects for each callback:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;createCallBack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;//First function&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;//Second function&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;that&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;//Third function&lt;/span&gt;
            &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;that&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;load&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;createCallBack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;First Message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;load&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;createCallBack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Second Message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But instead of using &lt;a href="http://doctrina.org/Javascript-Function-Invocation-Patterns.html#ci"&gt;constructor invocation pattern&lt;/a&gt;, the snippet can be rewritten by just using closures:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;createCallBack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;//First function&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;//This object is created within the first function and is accessible&lt;/span&gt;
                &lt;span class="c1"&gt;//to the second function due to the closure&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;message&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;//Second function&lt;/span&gt;
        &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;load&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;createCallBack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;First Message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;load&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;createCallBack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Second Message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The two code snippets above are equivalent, but the latter example is so much more concise and easier to read! Each code snippet demonstrates objects that have their own internal state. The &lt;code&gt;load&lt;/code&gt; event is given two callback functions, each an instance of an object with its own state (note this example may not work for Internet Explorer older than version 9).&lt;/p&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;a class="headerlink" href="#conclusion" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Closures make asynchronous programming elegant. In order to understand closures, it is vital to understand &lt;em&gt;function scope&lt;/em&gt;. JavaScript being functionally scoped encourages event driven programming, the mainstay of asynchronicity. &lt;/p&gt;</summary><category term="development"></category><category term="JavaScript"></category></entry><entry><title>JavaScript: Function Invocation Patterns</title><link href="http://web-pages.github.io/test/Javascript-Function-Invocation-Patterns.html" rel="alternate"></link><updated>2012-10-19T00:00:00-07:00</updated><author><name>Barry Steyn</name></author><id>tag:web-pages.github.io,2012-10-19:test/Javascript-Function-Invocation-Patterns.html</id><summary type="html">&lt;p&gt;JavaScript has been described as a &lt;em&gt;Functional Oriented Language&lt;/em&gt; (this as opposed to Object Oriented Language). The reason is because functions in JavaScript do more than just separate logic into execution units, functions are first class citizens that also provide &lt;a href="http://doctrina.org/JavaScript:Why-Understanding-Scope-And-Closures-Matter.html"&gt;scope&lt;/a&gt; and the ability to create objects. Having such a heavy reliance upon functions is both a blessing and a curse: It's a blessing because it makes the language light weight and fast (the main goal of its original development), but it is a curse because you can very easily shoot yourself in the foot if you don't know what you are doing.&lt;/p&gt;
&lt;p&gt;One concern with JavaScript functions is how different invocation patterns can produce vastly different results. This post explains the four patterns, how to use them and what to watch out for. The four invocation patterns are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Method Invocation&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Function Invocation&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Constructor Invocation&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Apply And Call Invocation&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="function-execution"&gt;Function Execution&lt;a class="headerlink" href="#function-execution" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;JavaScript (like all languages these days) has the ability to modularise logic in &lt;code&gt;functions&lt;/code&gt; which can be invoked at any point within the execution. Invoking a function suspends execution of the current function, passing controls and parameters to the invoked function. In addition, a parameter called &lt;code&gt;this&lt;/code&gt; is also passed to the function. The invocation operator is a pair of round brackets &lt;code&gt;()&lt;/code&gt;, that can contain zero or more expressions separated by a comma.&lt;/p&gt;
&lt;p&gt;Unfortunately, there is more than one pattern that can be used to invoke functions. These patterns are not &lt;em&gt;nice-to-know&lt;/em&gt;: They are absolutely essential to know. This is because invoking a function with a different pattern can produce a vastly different result. I believe that this is a language design error in JavaScript, and had the language been designed with more thought (and less haste), this would not have been such a big issue.&lt;/p&gt;
&lt;h1 id="the-four-invocation-patterns"&gt;The Four Invocation Patterns&lt;a class="headerlink" href="#the-four-invocation-patterns" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Even though there are is only one &lt;em&gt;invocation operator&lt;/em&gt; &lt;code&gt;()&lt;/code&gt;, there are four &lt;em&gt;invocation patterns&lt;/em&gt;. Each pattern differs in how the &lt;code&gt;this&lt;/code&gt; parameter is initialised. &lt;/p&gt;
&lt;h2 id="method-invocation"&gt;Method Invocation&lt;a class="headerlink" href="#method-invocation" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When a function is part of an object, it is called a &lt;em&gt;method&lt;/em&gt;. Method invocation is the pattern of invoking a function that is part of an object. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//Method invocation&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Method invocation is identified when a function is preceded by &lt;code&gt;object.&lt;/code&gt;, where &lt;code&gt;object&lt;/code&gt; is the name of some object. JavaScript will set the &lt;code&gt;this&lt;/code&gt; parameter to the object where the method was invoked on. In the example above, &lt;code&gt;this&lt;/code&gt; would be set to &lt;code&gt;obj&lt;/code&gt;. JavaScript binds &lt;code&gt;this&lt;/code&gt; at execution (also known as &lt;em&gt;late binding&lt;/em&gt;).&lt;/p&gt;
&lt;h2 id="function-invocation"&gt;Function Invocation &lt;a id="fi"&gt;&lt;/a&gt;&lt;a class="headerlink" href="#function-invocation" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Function invocation is performed by invoking a function using &lt;code&gt;()&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When using the function invocation pattern, &lt;code&gt;this&lt;/code&gt; is set to the global object. This was a mistake in the JavaScript language! Blindly binding &lt;code&gt;this&lt;/code&gt; to the global object can destroy its current context. It is noticable when using an &lt;em&gt;inner function&lt;/em&gt; within a method function. An example should explain things better: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//Global variable&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;innerFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nx"&gt;innerFunction&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//Function invocation pattern&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//Method invocation pattern&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What do you think will be printed to screen? For those that answered &lt;em&gt;1&lt;/em&gt;, you are wrong (but don't be too hard on yourselves, this is because JavaScript does not do things very well). The real answer is &lt;em&gt;500&lt;/em&gt;. Note that &lt;code&gt;innerFunction&lt;/code&gt; is called using the function invocation pattern, therefore &lt;code&gt;this&lt;/code&gt; is set to the global object. The result is that &lt;em&gt;innerFunction&lt;/em&gt; (again, it is important to note that it is invoked with function pattern) will not have &lt;code&gt;this&lt;/code&gt; set to current object. Instead, it is set to the global object, where &lt;code&gt;value&lt;/code&gt; is defined as &lt;em&gt;500&lt;/em&gt;. I stress that this is bad language design; the increment function was invoked with the method invocation pattern, and so it is natural to assume the &lt;code&gt;this&lt;/code&gt; should always point to the current function when used inside it.&lt;/p&gt;
&lt;p&gt;&lt;a id="standardfix"&gt;&lt;/a&gt;There is an easy way to get round this problem, but it is in my opinion a hack. One gets around this problem by assigning a variable (by convention, it is named &lt;code&gt;that&lt;/code&gt;) to &lt;code&gt;this&lt;/code&gt; inside the function (aside: This works because functions in JavaScript are &lt;a href="http://doctrina.org/JavaScript:Why-Understanding-Scope-And-Closures-Matter.html#closures"&gt;closures&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//Global variable&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;that&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;that&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;innerFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;that&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nx"&gt;innerFunction&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//Function invocation pattern&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If &lt;code&gt;this&lt;/code&gt; could be bound to the current object whose scope it is called in, function and method invocations would be identical.&lt;/p&gt;
&lt;h2 id="constructor-invocation"&gt;Constructor Invocation &lt;a id="ci"&gt;&lt;/a&gt;&lt;a class="headerlink" href="#constructor-invocation" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Warning&lt;/em&gt;: This is another JavaScript peculiarity! JavaScript is not a classical object oriented language. Instead, it is a prototypical object oriented language, but the creators of JavaScript felt that people with classical object orientation experience (the vast majority) may be unhappy with a purely prototype aproach. This resulted in JavaScript being unsure of its prototypical nature and the worst thing happened: It mixed classical object orientation syntax with its prototypical nature. The result: A mess!&lt;/p&gt;
&lt;p&gt;In classical object orientation, an object is an instantiation of a class. In C++ and Java, this instantiation is performed by using the &lt;code&gt;new&lt;/code&gt; operator. This seems to be the inspiration behind the constructor invocation pattern...&lt;/p&gt;
&lt;p&gt;The constructor invocation pattern involves putting the &lt;code&gt;new&lt;/code&gt; operator just before the function is invoked. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;Cheese&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;cheeseType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;cheeseType&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;cheddar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Cheese&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cheddar&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//new object returned, not the type.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Even though &lt;code&gt;Cheese&lt;/code&gt; is a function object (and intuitively, one thinks of functions as running modularised pieces of code), we have created a new object by invoking the function with &lt;code&gt;new&lt;/code&gt; in front of it. The &lt;code&gt;this&lt;/code&gt; parameter will be set to the newly created object and the &lt;code&gt;return&lt;/code&gt; operator of the function will have its behaviour altered. Regarding the behaviour of the &lt;code&gt;return&lt;/code&gt; operator in constructor invocation, there are two cases: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If the function returns a simple type (number, string, boolean, null or undefined), the return will be ignored and instead &lt;code&gt;this&lt;/code&gt; will be returned (which is set to the new object).&lt;/li&gt;
&lt;li&gt;If the function returns an instance of &lt;code&gt;Object&lt;/code&gt; (anything other than a simple type), then that object will be returned instead of returning &lt;code&gt;this&lt;/code&gt;. This pattern is not used that often, but it may have utility when used with &lt;a href="http://doctrina.org/JavaScript:Why-Understanding-Scope-And-Closures-Matter.html#closures"&gt;closures&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;Func1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;Func2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;I am a simple type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;f1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Func1&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//f1 is set to obj&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;f2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Func2&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//f2 is set to a new object&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We might ignore the constructor invocation pattern, and just use &lt;a href="http://doctrina.org/Javascript-Objects-Prototypes.html#cofl"&gt;object literals&lt;/a&gt; to make objects, except that the makers of JavaScript have enabled a key feature of their language by using this pattern: Object creation with an arbitrary prototype link (see &lt;a href="http://doctrina.org/Javascript-Objects-Prototypes.html"&gt;previous post&lt;/a&gt; for more details). This pattern is unintuitive and also &lt;a href="http://doctrina.org/Javascript-Objects-Prototypes.html#pcip"&gt;potentially problematic&lt;/a&gt;. There is a &lt;a href="http://doctrina.org/Javascript-Objects-Prototypes.html#remedy"&gt;remedy&lt;/a&gt; which was championed by Douglas Crockford: Augment &lt;code&gt;Object&lt;/code&gt; with a create method that accomplishes what the constructor invocation pattern tries to do. I am happy to note that as of JavaScript 1.8.5, &lt;code&gt;Object.create&lt;/code&gt; is a reality and can be used. Due to legacy, the constructor invocation is still used often, and for backward compatability, will crop up quite frequently.&lt;/p&gt;
&lt;h2 id="apply-and-call-invocation"&gt;Apply And Call Invocation&lt;a class="headerlink" href="#apply-and-call-invocation" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The apply pattern is not as badly thought out as the two preceding patterns. The &lt;code&gt;apply&lt;/code&gt; method allows manual invocation of a function with a means to pass the function an array of parameters and explicitly set the &lt;code&gt;this&lt;/code&gt; parameter. Because functions are first class citizens, they are also objects and hence can have methods (functions) run on it. In fact, every function is linked to &lt;code&gt;Function.prototype&lt;/code&gt; (see &lt;a href="http://doctrina.org/Javascript-Objects-Prototypes.html#cfo"&gt;here&lt;/a&gt; for more details), and so methods can very easily be augmented to any function. The apply method is just an augmentation to every function as - I presume - it is defined on &lt;code&gt;Function.prototype&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Apply takes two parameters: the first parameter is an object to bind the &lt;code&gt;this&lt;/code&gt; parameter to, the second is an array which is mapped to the parameters:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//7&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the example above, &lt;code&gt;this&lt;/code&gt; is bound to null (the function is not an object, so it is not needed) and array is bound to &lt;code&gt;num1&lt;/code&gt; and &lt;code&gt;num2&lt;/code&gt;. More interesting things can be done with the first parameter:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello World&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;displayData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;displayData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//undefined&lt;/span&gt;
&lt;span class="nx"&gt;displayData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//Hello World&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The example above uses &lt;code&gt;apply&lt;/code&gt; to bind &lt;code&gt;this&lt;/code&gt; to &lt;code&gt;obj&lt;/code&gt;. This results in being able to produce a value for &lt;code&gt;this.data&lt;/code&gt;. Being able to expicitly assign a value to &lt;code&gt;this&lt;/code&gt; is where the real value of apply comes about. Without this feature, we might as well use &lt;code&gt;()&lt;/code&gt; to invoke functions.&lt;/p&gt;
&lt;p&gt;JavaScript also has another invoker called &lt;code&gt;call&lt;/code&gt;, that is identical to &lt;code&gt;apply&lt;/code&gt; except that instead of taking an array of parameters, it takes an argument list. If JavaScript would implement function overriding, I think that &lt;code&gt;call&lt;/code&gt; would be an overridden variant of &lt;code&gt;apply&lt;/code&gt;. Therefore one talks about &lt;code&gt;apply&lt;/code&gt; and &lt;code&gt;call&lt;/code&gt; in the same vein.&lt;/p&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;a class="headerlink" href="#conclusion" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;For better or worse, JavaScript is about to take over the world. It is therefore very important that the peculiarities of the language be known and avoided. Learning how the four function invocation methods differ and how to avoid their pitfalls is fundamental to anyone who wants to use JavaScript. I hope this post has helped people when it comes to invoking functions.&lt;/p&gt;
&lt;h2 id="update"&gt;Update&lt;a class="headerlink" href="#update" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Wow, this has &lt;a href='http://doctrina.org/static/images/TopOfHackerNews.png'&gt;reached top of Hacker News&lt;/a&gt;. Thanks for upvoting it everybody.&lt;/li&gt;
&lt;li&gt;Now its also gonna be &lt;a href='http://hackermonthly.com/issue-32.html'&gt;published&lt;/a&gt; :)&lt;/li&gt;
&lt;/ul&gt;</summary><category term="development"></category><category term="JavaScript"></category></entry><entry><title>Javascript: Object Prototypes</title><link href="http://web-pages.github.io/test/Javascript-Objects-Prototypes.html" rel="alternate"></link><updated>2012-10-12T00:00:00-07:00</updated><author><name>Barry Steyn</name></author><id>tag:web-pages.github.io,2012-10-12:test/Javascript-Objects-Prototypes.html</id><summary type="html">&lt;p&gt;This post discusses JavaScript objects with emphasis on its prototype linkings. After reading this post, you should understand the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Object creation in JavaScript.&lt;/li&gt;
&lt;li&gt;Prototype linkings.&lt;/li&gt;
&lt;li&gt;What &lt;code&gt;Object.prototype&lt;/code&gt; and &lt;code&gt;Function.prototype&lt;/code&gt; are used for.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Douglas_Crockford"&gt;Douglas Crockford's&lt;/a&gt; wonderful book &lt;a href="http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742/ref=sr_1_1?ie=UTF8&amp;amp;qid=1346978272&amp;amp;sr=8-1&amp;amp;keywords=javascript+the+good+parts"&gt;JavaScript: The Good Parts&lt;/a&gt; does a fanastic job of explaining this topic, and I urge the interested reader to buy his book.&lt;/p&gt;
&lt;h1 id="javascript-objects"&gt;JavaScript Objects&lt;a class="headerlink" href="#javascript-objects" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;In JavaScript the simple types are &lt;em&gt;numbers&lt;/em&gt;, &lt;em&gt;strings&lt;/em&gt;, &lt;em&gt;booleans&lt;/em&gt; (&lt;em&gt;true&lt;/em&gt; and &lt;em&gt;false&lt;/em&gt;), &lt;em&gt;null&lt;/em&gt; and &lt;em&gt;undefined&lt;/em&gt;. All other values are objects. Even though there are multiple ways to create objects, there are really only two &lt;em&gt;atomic&lt;/em&gt; mechanisms that are used:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Literals. &lt;/li&gt;
&lt;li&gt;Functions.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="creating-objects-from-literals"&gt;Creating Objects From Literals &lt;a id="cofl"&gt;&lt;/a&gt;&lt;a class="headerlink" href="#creating-objects-from-literals" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Creating objects from literals is very simple. The following is an &lt;em&gt;object literal&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="s2"&gt;&amp;quot;First_Name&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Barry&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
    &lt;span class="s2"&gt;&amp;quot;Last_Name&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Steyn&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;do_Something&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;something&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Object Literals do not look like traditional objects. In fact, Object Literals look more like a structure that can hold things.  There is however one difference between a JavaScript object and a structure that can hold things: All JavaScript objects have a &lt;em&gt;prototype&lt;/em&gt; linking.&lt;/p&gt;
&lt;h2 id="the-prototype-link"&gt;The Prototype Link&lt;a class="headerlink" href="#the-prototype-link" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Every Object has a &lt;em&gt;hidden&lt;/em&gt; link to another object called a &lt;em&gt;prototype link&lt;/em&gt;. Objects by default are linked to the object &lt;code&gt;Object.prototype&lt;/code&gt;. The prototype link is only used when retrieving property values from an object (it is not touched when updating an object). When retrieving a property value from an object, if it cannot be found, it will look for it in the prototype object that it is linked to. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// undefined - property age does not exist&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;JavaScript tried to find the property age on person, and it could not. So then it tried to find it on &lt;code&gt;Object.prototype&lt;/code&gt; and it could not find it either. So it returned "&lt;em&gt;undefined&lt;/em&gt;".&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;56&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Every object is linked to Object.prototype by default&lt;/span&gt;
&lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 56&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;JavaScript could not find age on person, but it did find it on &lt;code&gt;Object.prototype&lt;/code&gt;, which is linked to person. Therefore the prototype linkage is used to &lt;em&gt;augment&lt;/em&gt; an object with additional properties. In a classical object oriented language like Java or C++, augmentation is performed using inheritance. And so a prototype link can be considered as providing the property augmentation feature of object inheritance.&lt;/p&gt;
&lt;h2 id="creating-function-objects"&gt;Creating Function Objects &lt;a id="cfo"&gt;&lt;/a&gt;&lt;a class="headerlink" href="#creating-function-objects" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Functions in JavaScript are objects and are &lt;a href="http://en.wikipedia.org/wiki/First-class_citizen"&gt;first class citizens&lt;/a&gt;. A variable can be assigned a function object like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;addNum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;addNum&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//function - which is an object in JavaScript&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Since functions are objects, they too have a prototype link. But where object literals are by default linked to &lt;code&gt;Object.prototype&lt;/code&gt;, function objects are linked to &lt;code&gt;Function.prototype&lt;/code&gt;. There is one other difference that function objects have (and this is where it starts get confusing); function objects have in addition to a prototype link a &lt;em&gt;property&lt;/em&gt; called &lt;em&gt;prototype&lt;/em&gt;. This property (again, the &lt;em&gt;prototype&lt;/em&gt; property &lt;strong&gt;is not&lt;/strong&gt; the prototype link) can be manipulated (its use will be explained in the next section).&lt;/p&gt;
&lt;p&gt;Just like &lt;code&gt;Object.prototype&lt;/code&gt; is used to augment objects with properties, so &lt;code&gt;Function.prototype&lt;/code&gt; is used to augment functions with properties.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;addNum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 7&lt;/span&gt;

&lt;span class="c1"&gt;//Add a function to Function.prototype&lt;/span&gt;
&lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substract&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//We can now use subtract on any function object&lt;/span&gt;
&lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;addNum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subtract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;Function.prototype&lt;/code&gt; is itself an object (big surprise there), and therefore it is linked to &lt;code&gt;Object.prototype&lt;/code&gt;. If something cannot be found in &lt;code&gt;Function.prototype&lt;/code&gt;, it will be searched for on &lt;code&gt;Function.prototype&lt;/code&gt;'s linked prototype object, which is &lt;code&gt;Object.prototype&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;denominator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;divide&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;denominator&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;addNum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;divide&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the above example, &lt;em&gt;addNum&lt;/em&gt; was searched for &lt;em&gt;divide&lt;/em&gt;. Then &lt;code&gt;Function.prototype&lt;/code&gt; was searched, after which, &lt;code&gt;Object.prototype&lt;/code&gt; was searched, where it was eventually found. Therefore prototype links are chained together, whereby if a property is not found in the current object, it then searches for it in its linked prototype object. And if that object does not have the property, it is then searched for in that object's linked prototype object, and so on, until the process ends with &lt;code&gt;Object.prototype&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The process described above is the mainstay of &lt;a href="http://en.wikipedia.org/wiki/Prototype-based_programming"&gt;Prototype Based Programming&lt;/a&gt;, and it is called &lt;em&gt;prototype chaining&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id="creating-objects-from-functions"&gt;Creating Objects From Functions &lt;a id="coff"&gt;&lt;/a&gt;&lt;a class="headerlink" href="#creating-objects-from-functions" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This section should not be confused with the previous section. Their titles share similar wording, but in this section, we are going to talk about how to create a new object using a function, and last section we talked about creating function objects.&lt;/p&gt;
&lt;p&gt;To recap from the last section, this is how a &lt;em&gt;function object&lt;/em&gt; is created:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;Animal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The variable &lt;code&gt;Animal&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Is a function and an object (remember, everything is an object in JavaScript).  &lt;/li&gt;
&lt;li&gt;It has a &lt;em&gt;prototype property&lt;/em&gt;, and its prototype link is to set to &lt;code&gt;Function.prototype&lt;/code&gt; by default.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But something special happens here if the function is invoked with the reserved word &lt;code&gt;new&lt;/code&gt; (called the &lt;a href="http://doctrina.org/Javascript-Function-Invocation-Patterns.html#ci"&gt;constructor invocation pattern&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;cat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Animal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fluffy&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//Using new to invoke the function&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What happens here is that &lt;code&gt;new&lt;/code&gt; creates an object from the function object &lt;code&gt;Animal&lt;/code&gt;. Its power comes in because it will use &lt;code&gt;Animal&lt;/code&gt;'s &lt;em&gt;prototype property&lt;/em&gt; as the &lt;em&gt;prototype link&lt;/em&gt; for the new object. And since &lt;code&gt;Animal&lt;/code&gt; can set the value of its prototype property, objects constructed in this way do not have to be linked to &lt;code&gt;Object.prototype&lt;/code&gt;. Got that? If not, here is an example which should explain things:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;species&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;species&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;human&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;Entity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;alien&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Entity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Yoda&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;Entity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;species&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;human&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Entity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Jason&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the above, the &lt;code&gt;alien&lt;/code&gt; and &lt;code&gt;human&lt;/code&gt; objects are constructed from the function &lt;code&gt;Entity&lt;/code&gt; via the &lt;em&gt;constructor invocation pattern&lt;/em&gt; that is initiated by putting the &lt;code&gt;new&lt;/code&gt; keyword in front of the function name. When &lt;code&gt;alien&lt;/code&gt; is constructed, &lt;code&gt;Entity&lt;/code&gt;'s prototype property has not been altered, and so &lt;code&gt;alien&lt;/code&gt; is linked to &lt;code&gt;Object.prototype&lt;/code&gt;. But when constructing &lt;code&gt;human&lt;/code&gt;, &lt;code&gt;Entity&lt;/code&gt;'s prototype property was altered to species, and so the prototype object linked to &lt;code&gt;human&lt;/code&gt; is &lt;code&gt;species&lt;/code&gt;, which in turn is itself linked to &lt;code&gt;Object.prototype&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;alien&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;species&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;span class="n"&gt;human&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;species&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// human&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="the-problem-with-using-the-constructor-invocation-pattern"&gt;The problem with using the "constructor invocation pattern" &lt;a id="pcip"&gt;&lt;/a&gt;&lt;a class="headerlink" href="#the-problem-with-using-the-constructor-invocation-pattern" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Using &lt;code&gt;new&lt;/code&gt; is one of four ways in which to invoke a function, the most popular way being to call the function. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;Vehicle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;car&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Vehicle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Toyota&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Normal function call&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;plane&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Vehicle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Boeing&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the example above, &lt;code&gt;car&lt;/code&gt; was assigned the result of invoking &lt;code&gt;Vehicle&lt;/code&gt; as a normal function, which in this case was &lt;em&gt;Toyota&lt;/em&gt;. But &lt;code&gt;plane&lt;/code&gt; on the other was assigned the result of using the &lt;em&gt;constructor invocation pattern&lt;/em&gt; which is an object (the return is ignored). This is terrible, and it is very easy to make a mistake.&lt;/p&gt;
&lt;p&gt;One recommended approach is to always start functions that are to be invoked with &lt;code&gt;new&lt;/code&gt; with &lt;em&gt;capital letters&lt;/em&gt;. This should help for readability, but when someone is spending days trying to hunt for a bug, this will be little compensation. &lt;a id="remedy"&gt;&lt;/a&gt;Instead, a much better way would be to augment &lt;code&gt;Object&lt;/code&gt; with a create method if it does not exist:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;function&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;//If working with a version of JavaScript prior to 1.8.5&lt;/span&gt;
    &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;F&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
        &lt;span class="nx"&gt;F&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;F&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Objects can now be created with a chosen prototype link by doing the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;animal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cat&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;make_sound&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;purrrr&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;cat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;make_sound&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//purrrr&lt;/span&gt;
&lt;span class="nx"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//cat&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="conclusion"&gt;Conclusion&lt;a class="headerlink" href="#conclusion" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Object orientation in JavaScript is a bit of a mess. This is because JavaScript is quite unsure about what it is, and ends up being a mix of a classical object oriented language and a prototype based language. Hence we get the &lt;code&gt;new&lt;/code&gt; keyword, which makes JavaScript look like a classical object oriented language, even though it is not.&lt;/p&gt;
&lt;p&gt;To summarise, here are the three objects this blog discusses:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;//Object Literal&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;objectLiteral&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;property1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;value1&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;//Function Object&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;functionObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//Object From Function&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;objectFromFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;functionObject&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And to summarise, the prototype linkings and properties available to each object:
&lt;center&gt;
    &lt;table style="border-style: solid; border-width:1px; border-color: #000000;"&gt;
        &lt;tr&gt;
            &lt;td&gt;&lt;b&gt;Object Literal&lt;/b&gt;&lt;/td&gt;
            &lt;td&gt;&lt;b&gt;Function Object&lt;/b&gt;&lt;/td&gt;
            &lt;td&gt;&lt;b&gt;Object From Function&lt;/b&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;
                &lt;ul&gt;
                    &lt;li&gt; &lt;em&gt;Construction&lt;/em&gt; - via curly braces &lt;code&gt;{}&lt;/code&gt;&lt;/li&gt;
                    &lt;li&gt; &lt;em&gt;Prototype Link&lt;/em&gt; - Object.prototype&lt;/li&gt;
                    &lt;li&gt; &lt;em&gt;Prototype Property&lt;/em&gt; - does not exist&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/td&gt;
            &lt;td&gt;
                &lt;ul&gt;
                    &lt;li&gt; &lt;em&gt;Construction&lt;/em&gt; - via the &lt;code&gt;function&lt;/code&gt; keyword &lt;/li&gt;
                    &lt;li&gt; &lt;em&gt;Prototype Link&lt;/em&gt; - Function.prototype&lt;/li&gt;
                    &lt;li&gt; &lt;em&gt;Prototype Property&lt;/em&gt; - exists&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/td&gt;
            &lt;td&gt;
                &lt;ul&gt;
                    &lt;li&gt; &lt;em&gt;Construction&lt;/em&gt; - via &lt;code&gt;new&lt;/code&gt; keyword with function object&lt;/li&gt;
                    &lt;li&gt; &lt;em&gt;Prototype Link&lt;/em&gt; - Whatever the function's (that was invoked by &lt;code&gt;new&lt;/code&gt;) prototype property is set to (&lt;code&gt;Object.prototype&lt;/code&gt; by default)&lt;/li&gt;
                    &lt;li&gt; &lt;em&gt;Prototype Property&lt;/em&gt; - does not exist&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
    &lt;/table&gt;
&lt;/center&gt;&lt;/p&gt;</summary><category term="development"></category><category term="JavaScript"></category></entry><entry><title>The 3 Seminal Events In Cryptography</title><link href="http://web-pages.github.io/test/The-3-Seminal-Events-In-Cryptography.html" rel="alternate"></link><updated>2012-05-20T00:00:00-07:00</updated><author><name>Barry Steyn</name></author><id>tag:web-pages.github.io,2012-05-20:test/The-3-Seminal-Events-In-Cryptography.html</id><summary type="html">&lt;p&gt;Cryptography is the art/science of keeping a secret. This need has been present since prerecorded human history, but we have some very famous early examples such as the &lt;a href="http://en.wikipedia.org/wiki/Caesar_cipher"&gt;Caesar Cipher&lt;/a&gt;. Yet these early examples were very easy to break. It took until the twentieth century for cryptography to be rigorously defined and useful to a wider audience, and it was largely done so in three seminal papers:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;Communication Theory of Secret Systems&lt;/em&gt; by &lt;a href="http://en.wikipedia.org/wiki/Claude_Shannon"&gt;Claude Shannon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;New Directions In Cryptography&lt;/em&gt; by &lt;a href="http://en.wikipedia.org/wiki/Whitfield_Diffie"&gt;Whitfield Diffie&lt;/a&gt; and &lt;a href="http://en.wikipedia.org/wiki/Martin_Hellman"&gt;Martin Hellman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;A Method for Obtaining Digital Signatures and Public-Key Cryptosystems&lt;/em&gt; by &lt;a href="http://en.wikipedia.org/wiki/Ron_Rivest"&gt;Ronald Rivest&lt;/a&gt;, &lt;a href="http://en.wikipedia.org/wiki/Adi_Shamir"&gt;Adi Shamir&lt;/a&gt; and &lt;a href="http://en.wikipedia.org/wiki/Leonard_Adleman"&gt;Leanard Adleman&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For this explanation, it helps to give a quick definition of the cryptographic process. A message (called the plain text) must be encrypted to cipher text. It is done so via an algorithm that takes two inputs - the &lt;em&gt;plain text&lt;/em&gt; to be encrypted, and a &lt;em&gt;secret key&lt;/em&gt;.&lt;/p&gt;
&lt;h1 id="communication-theory-of-secret-systems-by-claude-shannon"&gt;Communication Theory of Secret Systems by Claude Shannon&lt;a class="headerlink" href="#communication-theory-of-secret-systems-by-claude-shannon" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;How does one define security of a cipher? This question had not been rigorously answered until the above paper in 1949 by Claude Shannon was published. Claude Shannon has often been called the father of the digital world. One of the founding fathers of this amazing age that we live in, there is hardly anything that we take for granted in the electronic age that Claude Shannon did not have a hand in designing.&lt;/p&gt;
&lt;p&gt;Thank goodness Shannon had some spare time to devote to cryptography. His paper defines a secure cipher as &lt;em&gt;not letting anyone learn anything about the plain text given just the cipher text&lt;/em&gt;. He thus defines a perfect cipher as the following: Given a cipher text, the probability that it resulted from any plain text is equal. Okay, that does not sound so special, but that is because I dumbed it down a bit. It actually means that when you are given some cipher text, you have absolutely no idea what plain text was used as input to produce the cipher text, seeing as all plain text have the same probability to produce the cipher text, it could have been any plain text - we just don't know!&lt;/p&gt;
&lt;p&gt;Unfortunately, Shannon also proved that in order to have this perfect security, one needs a key at least as big as the message space. This makes perfect security impracticable: Given a message that it is a few gigabytes of size, the key to producing a perfect cipher must also be a few gigabytes large! So modern cryptography tries to relax the conditions of perfect security by defining something called &lt;em&gt;semantic security&lt;/em&gt;. Semantic security says that no efficient algorithm must have the ability to determine what plaintext produced the cipher text. More importantly, by relaxing Shannon's security definition, we are able to use keys that are tiny in comparison. Because it is not perfect by Shannon's definition, an algorithm can be produced that should be able to break the cipher. But as long as we make it so that the effort required is tantamount to waiting until the end of the universe, we are safe.&lt;/p&gt;
&lt;p&gt;Semantic security defines our modern cryptographic age. To be sure, if a cipher is semantic secure, it can also suffer from &lt;em&gt;chosen plaintext attacks&lt;/em&gt; and &lt;em&gt;chosen ciphertext attacks&lt;/em&gt;, but at least now we have a base metric which we can use to measure how effective our security is. And indeed, modern cryptographic atomics, like AES (advanced encryption standard) is as far as we know, semantically secure. And so we use it all the time.&lt;/p&gt;
&lt;h1 id="new-directions-in-cryptography-by-whitfield-diffie-and-martin-hellman"&gt;New Directions In Cryptography by Whitfield Diffie and Martin Hellman&lt;a class="headerlink" href="#new-directions-in-cryptography-by-whitfield-diffie-and-martin-hellman" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;The next big thing that happened has all to due with secret keys. A cipher such as AES is semantically secure, and so using it should be secure for two parties. But how can two parties agree upon a secret key to use with encryption without letting anyone know? In the Internet age, this problem is even more acute than one may suspect: Given two people that are separated by vast geographical distances and connected by the Internet who wish to communicate securely, how do they agree upon a secret key without anyone else being able to discover this secret key. The Internet is a very insecure medium by fact of anyone being able to connect to it. So agreeing upon a secret key in a secure manner over an insecure medium is not a trivial problem.&lt;/p&gt;
&lt;p&gt;Diffie-Hellman to the rescue! Their seminal paper allows us to perform the amazing feat of securely agreeing upon a secret over an insecure medium. I'm going to save it for another post in order to explain how Diffie-Hellman works (it requires some math background), but suffice it to say that Diffie-Hallman makes it possible for secure communication to happen anywhere over any connection.&lt;/p&gt;
&lt;h1 id="a-method-for-obtaining-digital-signatures-and-public-key-cryptosystems-by-ronald-rivest-adi-shamir-and-leanard-adleman"&gt;A Method for Obtaining Digital Signatures and Public-Key Cryptosystems by Ronald Rivest, Adi Shamir and Leanard Adleman&lt;a class="headerlink" href="#a-method-for-obtaining-digital-signatures-and-public-key-cryptosystems-by-ronald-rivest-adi-shamir-and-leanard-adleman" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;The last of the seminal papers was a really huge idea. Up until now, people had used the same key to both encrypt and decrypt their messages. One could think about encryption as a door with a lock: The same key used to lock the door is also used to unlock the door. The above paper changed all that!&lt;/p&gt;
&lt;p&gt;Commonly known as RSA (taken from the first letter of the surnames of the three inventors), it ushered in the era of &lt;em&gt;public key encryption&lt;/em&gt;, and allowed cryptography to do more than just keep secrets - it allowed cryptography to also uniquely identify a party thus making digital signatures possible.&lt;/p&gt;
&lt;p&gt;Public key cryptography works by having two keys: A public key, and a private key. The names are very descriptive: A public key is kept public and is shared with the world, a private key is kept private and may not be shared with anyone. If one encrypts with one key, then one must use the other key to decrypt. So if two users wish to communicate securely, then one of the users just asks for the other user's public key. The message is then encrypted using the public key, but the user with the private key is the only entity able to decrypt it. So it is useless to anyone else.&lt;/p&gt;
&lt;p&gt;Just as interesting is if something is encrypted using the private key. Only the public key can be used to decrypt. This may seem counter-intuitive at first, but think about what problem this solves. If I have your public key, and you give me something encrypted using your private key, then I am able to ensure that you are the person - and not anyone masquerading as you - who encrypted the message. This is because you are the only person with the private key. So your public key will only work with things that are encrypted with your private key, something which only you have access to. And this is the essence of a digital signature.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: I have written two blog posts explaining &lt;a href="http://doctrina.org/How-RSA-Works-With-Examples.html"&gt;how RSA works&lt;/a&gt; and &lt;a href="http://doctrina.org/Why-RSA-Works-Three-Fundamental-Questions-Answered.html"&gt;why RSA works&lt;/a&gt;.&lt;/p&gt;</summary><category term="cryptography"></category></entry><entry><title>Upstart With NodeJS And NVM</title><link href="http://web-pages.github.io/test/NodeJS-Under-NVM-With-Upstart.html" rel="alternate"></link><updated>2012-05-12T00:00:00-07:00</updated><author><name>Barry Steyn</name></author><id>tag:web-pages.github.io,2012-05-12:test/NodeJS-Under-NVM-With-Upstart.html</id><summary type="html">&lt;p&gt;Yet another very short blog article to help anyone who wants to setup an upstart process that runs a &lt;a href="http://nodejs.org/"&gt;NodeJS&lt;/a&gt; app under &lt;a href="https://github.com/creationix/nvm"&gt;nvm&lt;/a&gt;. Unlike the &lt;a href="http://doctrina.org/VirtualEnv-With-Upstart.html"&gt;uwsgi setup&lt;/a&gt;, there is no specific argument switch to give Node that will make it use nvm environment variables. In fact, since Node is single threaded, there is no special server process that must run in the background to interact with it (unlike &lt;a href="http://projects.unbit.it/uwsgi/"&gt;uwsgi&lt;/a&gt; that is needed for Python). This means that whatever executes Node must also introduce the environment variables manually. But doesn't that defeat the purpose of &lt;a href="https://github.com/creationix/nvm"&gt;nvm&lt;/a&gt;? Yes, it does! So lets just use &lt;a href="https://github.com/creationix/nvm"&gt;nvm&lt;/a&gt; to &lt;em&gt;manually introduce those environment variables&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;In order to run a &lt;a href="http://nodejs.org/"&gt;Node&lt;/a&gt; server in upstart that is under nvm, two things need to be determined:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The folder where the node app is defined. Not only is this the path where node will execute your app, but node will also search a folder called &lt;em&gt;node_modules&lt;/em&gt; under this path for &lt;em&gt;locally installed libraries&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;The folder where you have installed your &lt;code&gt;nvm.sh&lt;/code&gt; script.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: For what follows, the assumption is that the version of node that will be used for execution is the &lt;a href="https://github.com/creationix/nvm#usage"&gt;default version of nvm&lt;/a&gt;. This accomplished by using &lt;code&gt;alias&lt;/code&gt; with nvm to set &lt;code&gt;default&lt;/code&gt; (see previous link).&lt;/p&gt;
&lt;h1 id="an-upstart-example"&gt;An Upstart Example&lt;a class="headerlink" href="#an-upstart-example" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Lets assume the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Your app is defined in the path &lt;code&gt;"/home/dev/node-script"&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;nvm.sh&lt;/em&gt; script is installed in &lt;code&gt;"/home/dev/nvm/nvm.sh"&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then an upstart script to start node that will run this script under nvm is as follows:
&lt;script src="https://gist.github.com/4467515.js"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;The above upstart script is very basic, so you should customize it to suit your needs. Yet it has the essential ingredients. The important bit is the &lt;em&gt;exec&lt;/em&gt; command on line 11, which starts a bash shell script with the argument &lt;code&gt;-c&lt;/code&gt;. This argument means that any text afterwards will be executed as a command script. The command script passed does two things that are separated by &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; (the logical and operator):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;source /home/dev/nvm/nvm.sh&lt;/code&gt; - this will execute the &lt;code&gt;nvm.sh&lt;/code&gt; shell script that loads/creates all relevant environment variables. By using the &lt;a href="http://ss64.com/bash/period.html"&gt;source&lt;/a&gt; command, all these variables are put within the current shell that it is running in.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exec node app&lt;/code&gt; - it is essential that we use &lt;a href="http://ss64.com/bash/exec.html"&gt;exec&lt;/a&gt; to execute the node app. This will replace the current shell with &lt;code&gt;node app&lt;/code&gt; &lt;em&gt;without creating a new process&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The result of the above two commands is that the node app is executed within its own process but which has access to all environment variables that results from running the nvm shell script.&lt;/p&gt;</summary><category term="System Administration"></category></entry></feed>